package com.boonya.gis.algorithm;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * 
 * @author PJL
 *
 * @note     功能描述:TODOWKT格式转换
 * @package  com.boonya.gis.algorithm
 * @filename WKTUtil.java
 * @date     2019年4月15日 下午5:55:59
 */
public class WKTUtil {
	
	public static String WKT_LINESTRING="LINESTRING(116.2635628 39.9056225,116.2632708 39.9055305,116.26325779999999 39.9055225,116.26326279999999 39.9055215,116.2636838 39.9054585,116.2634018 39.9056065,116.2630878 39.9056025,116.2634028 39.9056575,116.2637088 39.9056415,116.2633728 39.9056435,116.2630428 39.9056895,116.2638028 39.9055345,116.2634448 39.9056685,116.2631638 39.9055655,116.26347679999999 39.9056065,116.26317279999999 39.9056025,116.26366279999999 39.9054195,116.2633678 39.9054845,116.2634978 39.9055705,116.26366279999999 39.9058025,116.2635518 39.9055275,116.26384279999999 39.9056705,116.2639848 39.9058955,116.2643008 39.9057755,116.26397779999999 39.9057315,116.2639128 39.9054105,116.26418079999999 39.9056305,116.2638738 39.9056485,116.2635288 39.9056205,116.2638328 39.9055335,116.2634808 39.9055585,116.2638128 39.9054555,116.2635598 39.9056445,116.2633858 39.9058435,116.2633458 39.9058315,116.2637818 39.9055885,116.2634448 39.9055795,116.2637568 39.9056125,116.26347679999999 39.9054915,116.2631588 39.9054785,116.26384879999999 39.9056165,116.2635298 39.9055025,116.2633828 39.9055395,116.2637548 39.9056265,116.2641368 39.9055195,116.26376379999999 39.9055445,116.2634648 39.9054655,116.2633328 39.9054475,116.2637908 39.9055455,116.2636198 39.9053265,116.2635978 39.9050845,116.26361279999999 39.9055645,116.2632938 39.9056105,116.26357279999999 39.9055135,116.2632998 39.9056205,116.2636158 39.9055295,116.2632168 39.9055235,116.2628368 39.9055655,116.2636758 39.9054785,116.2633518 39.9054585,116.2636988 39.9054005,116.2633498 39.9054805,116.2636768 39.9053725,116.2639848 39.9053715,116.26365679999999 39.9054545,116.26376479999999 39.9052125,116.26355579999999 39.9054085,116.2638558 39.9054725,116.26352179999999 39.9054925,116.2636278 39.9057825,116.26360679999999 39.9055065,116.2634638 39.9054815,116.26368579999999 39.9056425,116.2642528 39.9053245,116.2639118 39.9054265,116.2635428 39.9054555,116.2638628 39.9055855,116.2639378 39.9052925,116.2635798 39.9055435,116.2638528 39.9053995,116.2635648 39.9054845,116.2635648 39.9054825,116.2629898 39.9055115,116.2622008 39.9055675,116.2624398 39.9053265,116.2627048 39.9051645,116.26313379999999 39.9050575,116.2634338 39.9052425,116.2632328 39.9054455,116.2632208 39.9054225,116.2635408 39.9054175,116.2635138 39.9053255,116.26335279999999 39.9054515,116.2636678 39.9055865,116.2635888 39.9056325,116.2635748 39.9054875,116.2632388 39.9055145,116.2631638 39.9055245,116.2638588 39.9055995,116.26365679999999 39.9057845,116.2636078 39.9052945,116.2634898 39.9055005,116.2631578 39.9054685,116.2637338 39.9055285,116.2634198 39.9054805,116.2630968 39.9055055,116.2627578 39.9055285,116.2634558 39.9056225,116.2631308 39.9056425,116.2634388 39.9055095,116.2638278 39.9054665,116.2634078 39.9054455,116.2630088 39.9059495,116.2632988 39.9058645,116.2635858 39.9057085,116.2634068 39.9054925,116.26329179999999 39.9057375,116.2634558 39.9054935,116.26311679999999 39.9055275,116.2629908 39.9057815,116.2630648 39.9055235,116.26330879999999 39.9056755,116.2636218 39.9055125,116.2633458 39.9054055,116.2630758 39.9055685,116.2636368 39.9055345,116.2633048 39.9056685,116.2629938 39.9057145,116.26327979999999 39.9055345,116.2635858 39.9055055)";
	
	private static String WKT_POLYGON="POLYGON((124.65613543411474 40.686110374819684,124.65441882034263 40.69131695209112,124.66248690505628 40.69378993378842,124.66540514846257 40.693009002115716,124.67038332839361 40.69509146623616,124.67398821731414 40.69392008817754,124.67639147659152 40.69248837591529,124.68754946608777 40.69795474812267,124.68634783645358 40.68884387860937,124.6878927888404 40.687412057274685,124.68222796340411 40.682205174909235,124.68188464065149 40.67569599991827,124.68222796340411 40.67452428092141,124.68068301100831 40.67543561969812,124.67227160354203 40.676086568341105,124.66746508498733 40.67361292968684,124.6659201326005 40.66866537705202,124.66523348708625 40.65603443347451,124.6659201326005 40.642880084472274,124.64514910598581 40.64444311316128,124.63553606887637 40.6479597938822,124.62952792068748 40.653950749060094,124.62300478836063 40.65538328908585,124.62472140213275 40.66332681644753,124.63399111648955 40.66254552783124,124.6327894868464 40.66762374024646,124.6341627778659 40.670748601852104,124.64137255569795 40.67673751062765,124.64463412185688 40.67751863298217,124.64703738113424 40.685589694718715,124.64961230178792 40.68585003527735,124.65613543411474 40.686110374819684))";
	
	public static boolean IsNullOrEmpty(String value){
	    if ((value == null) || ("".equals(value))) {
	       return true;
	     }
	     return false;
	}
	/**
	 * WKT转Points
	 * 
	 * @param wkt
	 * @return
	 * @throws Exception 
	 */
	public static List<Point> linestringToPoints(String wkt) throws Exception{
		if(!wkt.startsWith("LINESTRING(")&&wkt.endsWith(")")){
			throw new Exception(" WKT format must like LINESTRING(。，。。。。 )");
		}
		List<Point> points=new ArrayList<Point>();
		String str=wkt.substring(wkt.indexOf('(')+1, wkt.indexOf(")"));
		String [] arrs=str.split(",");
		Point point=null;
		for (String lnglatStr : arrs) {
			point=new Point(Double.parseDouble(lnglatStr.split(" ")[1]), Double.parseDouble(lnglatStr.split(" ")[0]));
			points.add(point);
		}
		return points;
	}
	

	/**
	 * WKT转Points
	 * 
	 * @param wkt
	 * @return
	 * @throws Exception 
	 */
	public static List<Point> polygonToPoints(String wkt) throws Exception{
		if(!wkt.startsWith("POLYGON((")&&wkt.endsWith("))")){
			throw new Exception(" WKT format must like POLYGON((。，。。。。 ))");
		}
		List<Point> points=new ArrayList<Point>();
		String str=wkt.substring(wkt.lastIndexOf('(')+1, wkt.indexOf(")"));
		String [] arrs=str.split(",");
		Point point=null;
		for (String lnglatStr : arrs) {
			point=new Point(Double.parseDouble(lnglatStr.split(" ")[1]), Double.parseDouble(lnglatStr.split(" ")[0]));
			points.add(point);
		}
		return points;
	}
	
	/**
	 * 计算轨迹在围栏内外的里程(单位：米(m))
	 * 
	 * @param wktLine
	 * @param wktPolygon
	 * @return
	 * @throws Exception 
	 */
	public static Map<String,Double> getDistance(String wktLine,String wktPolygon) throws Exception{
		 if(IsNullOrEmpty(wktLine)||IsNullOrEmpty(wktPolygon)){
			 return null;
		 }
		 double outDistance=0.0,inDistance=0.0;
		 List<Point> linePoints=linestringToPoints(wktLine);
		 List<Point> polygonPoints=polygonToPoints(wktPolygon);
		 List<GeoPoint> polygonPoints_=GeoUtil.convertToGeoPoints(polygonPoints);
		 GeoPoint lastPoint=null,currentPoint=null;
		 boolean lastIn=false;
		 for (int i = 0,j=linePoints.size(); i < j; i++) {
			 currentPoint=linePoints.get(i).convertToGeoPoint(linePoints.get(i));
			 boolean isInRegion=GeoUtil.isInPolygon(currentPoint, polygonPoints_);
			 if(isInRegion&&lastIn&&lastPoint!=null&&currentPoint!=null){
				 inDistance+=GeoUtil.getDistance(lastPoint, currentPoint); 
			 }else if(lastPoint!=null&&currentPoint!=null){
				 outDistance+=GeoUtil.getDistance(lastPoint, currentPoint);
			 }
			 lastIn=isInRegion;
			 lastPoint=currentPoint;
		}
		 Map<String,Double> map=new HashMap<String, Double>();
		 map.put("IN_DISTANCE", inDistance);
		 map.put("OUT_DISTANCE", outDistance);
		 return map;
	}
	
	public static void main(String[] args) throws Exception {
		System.out.println(WKTUtil.linestringToPoints(WKTUtil.WKT_LINESTRING).size());
		
		System.out.println(WKTUtil.polygonToPoints(WKTUtil.WKT_POLYGON).size());
		
		Map<String,Double> map=WKTUtil.getDistance(WKT_LINESTRING,WKTUtil.WKT_POLYGON);
		System.out.println("IN:"+map.get("IN_DISTANCE")+" OUT:"+map.get("OUT_DISTANCE"));
	}

}
